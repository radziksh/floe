.. _logic_editor:

***************************
Визуальное программирование
***************************

.. contents:: Содержание
    :depth: 3
    :backlinks: entry

Редактор логики (Logic Editor)
==========================================

Визуальное программирование осуществляется путем создания нодового дерева логики в окне нодового 
редактора. С помощью ``Logic Editor`` можно существенно расширить функциональность 
сцены, не прибегая при этом к программированию.

.. image:: src_images/logic_editor/logic_editor_app_example.jpg
   :align: center
   :width: 100%

Для активации логики, на вкладке настроек сцены 
Blender необходимо установить галочку ``Logic Editor`` и добавить/выбрать
активное нодовое дерево:

.. image:: src_images/logic_editor/logic_editor_activation.png
   :align: center
   :width: 100%

Для редактирования дерева логики необходимо перейти в ``Редактор Нод`` 
(Node Editor) выбрать тип нодового дерева ``Blend4Web logic``:

.. image:: src_images/logic_editor/logic_editor_tree_type.png
   :align: center
   :width: 100%

Затем выбрать дерево для редактирования:

.. image:: src_images/logic_editor/logic_editor_select_tree.png
   :align: center
   :width: 100%

   
|

Создание нод осуществляется привычным для Blender сочетанием клавиш
``Shift+A``.

Ноды  - это логические блоки, выполнение которых начинается с
``Entry Point``, которая имеет один единственный выход. Почти все остальные 
ноды помимо одного или двух выходов имеют также входы, таким образом они
могут быть вставлены в любое место в дереве. Ноды без выходов, например 
``Page Redirect``, могут быть вставлены только в конец какой-либо ветви.
Ноды с двумя выходами позволяют ветвить алгоритм в зависимости от
успеха/провала указанного условия, например ``Conditional Jump``.

Для реализации сложной логики предусмотрены числовые переменные, называемые
регистрами. Каждый из 8 регистров может хранить в себе одно числовое значение.
Регистры могут быть использованы для хранения какого-либо состояния сцены
(например, это может быть счётчик проигрываемых анимаций, количество жизней,
оставшихся у персонажа и т.д.).

Пример использования Logic Editor:

.. image:: src_images/logic_editor/logic_editor_example.png
   :align: center
   :width: 100%

Ноды
====

Ниже рассмотрены все возможные варианты нод.

.. _nla_entry:

Entry Point
-----------

Является точкой начала выполнения скрипта. Использование нескольких точек входа
позволяет эмулировать многопоточное выполнение.

.. image:: src_images/logic_editor/logic_editor_entry.png
    :align: center
    :width: 100%

Входные параметры
.................

Отсутствуют.

Выходные параметры
..................

*Next*
    Следующая нода.

Внутренние параметры
....................

Отсутствуют.

.. _nla_play_timeline:

Play Timeline и Stop Timeline
-----------------------------

Позволяют управлять NLA анимацией. ``Play Timeline`` проигрывать участок NLA, 
начиная с кадра, на который указывает маркер.
Анимация воспроизводится до следующего маркера, либо до конца шкалы времени
сцены, после чего управление переходит к следующей ноде. ``Stop Timeline``
останавливает воспроизведение.

.. image:: src_images/logic_editor/logic_editor_timeline.png
   :align: center
   :width: 100%

Входные параметры
.................

*Previous*
    Предыдущая нода.

Выходные параметры
..................

*Next*
    Следующая нода.

Внутренние параметры
....................

*Start Marker*
    Кадр, с которого должна воспроизводиться анимация. Если не указан, анимация воспроизводится с первого кадра и может работать некорректно.

*End Marker*
    Кадр, на котором проигрывание анимации должно остановиться. Если не указан, анимация воспроизводится до окончания шкалы времени и может работать некорректно.
   

.. _nla_select_play:

Play Animation
--------------
Используется для воспроизведения анимации объекта. Проигрываемая анимация может иметь один из трёх типов:

Обычный Action:

.. image:: src_images/logic_editor/play_anim_action.png
   :align: center
   :width: 100%

Шейдерный Action:

.. image:: src_images/logic_editor/play_anim_nodetree.png
   :align: center
   :width: 100%

Система частиц:

.. image:: src_images/logic_editor/play_anim_particle.png
   :align: center
   :width: 100%

Входные параметры
.................

*Previous*
    Предыдущая нода.

Выходные параметры
..................

*Next*
    Следующая нода.

Внутренние параметры
....................

*Object*
    Имя объекта, анимацию которого следует воспроизвести.

*Anim. Name*
    Имя анимации, которую следует воспроизвести. В случае, если имя анимации не указано, проигрывается вся временная шкала.

*Behavior*
    Задаёт поведение анимации. Может иметь одно из следующих значений:

    * *Finish Stop* - анимация воспроизводится один раз.
    * *Finish Reset* - анимация воспроизводится один раз, после её завершения объект возвращается в исходное состояние.
    * *Loop* - анимация воспроизводится циклически до тех пор, пока не остановлена с помощью ноды ``Stop Animation``.

*Do Not Wait*
    Если этот параметр активирован, нода ``Play Animation`` передаст управление следующей ноде сразу после начала воспроизведения анимации. В противном случае управление будет передано только после окончания анимации.

.. _nla_stop_anim:

Stop Animation
--------------
Используется для остановки анимации объекта.

Входные параметры
.................

*Previous*
    Предыдущая нода.

Выходные параметры
..................

*Next*
    Следующая нода.

Внутренние параметры
....................
*Set First Frame*
    Вернуться к первому кадру после того, как анимация остановлена.

Select & Play Timeline (Deprecated)
-----------------------------------
.. note::

    Устарел! Не рекомендуется использовать!
    Взамен следует использовать комбинацию нод ``Switch Select`` и ``Play Timeline``.

Ожидать, когда пользователь выберет объект (с помощью клика мышью в версии
движка для десктопа, либо нажатия на экране в мобильной версии). Если выбран
объект, указанный в параметрах ноды, начать играть анимацию аналогично ноде
``Play Timeline``, если же был выбран любой другой объект - немедленно передать управление
следующей ноде.

Select & Play Animation (Deprecated)
------------------------------------
.. note::

    Устарел! Не рекомендуется использовать!
    Взамен следует использовать комбинацию нод ``Switch Select`` и ``Play Animation``.

Ожидать, когда пользователь выберет объект (с помощью клика мышью в версии
движка для десктопа, либо нажатия на экране в мобильной версии). Если выбран
объект, указанный в параметрах ноды, начать играть анимацию аналогично ноде
``Play Animation``, если же был выбран любой другой объект - немедленно передать управление
следующей ноде. 

Select (Deprecated)
-------------------
.. note::

    Устарел! Не рекомендуется использовать!
    Взамен следует использовать ноду ``Switch Select``

Аналогично ноде ``Select & Play``, за исключением того, что вместо анимации
осуществляется переход. Указанная функция позволяет реализовать более сложную
логику, поскольку появляется возможность распознавания результата выбора
пользователя.

.. _nla_jump:

Conditional Jump
----------------

Перейти к указанной ноде в случае выполнения выбранного условия. В качестве
параметров условия (операндов) могут выступать также регистры, которые
активируются с помощью соответствующих переключателей.

.. image:: src_images/logic_editor/logic_editor_conditional_jump.png
    :align: center
    :width: 100%

Входные параметры
.................

*Previous*
    Предыдущая нода.

Выходные параметры
..................

*True*
    Утверждение истинно.

*False*
    Утверждение ложно.

Внутренние параметры
....................

*Condition*
    Логическое утверждение. Может иметь один из следующих типов:

    * *Equal* - первый операнд равен второму.
    * *Not Equal* - первый операнд не равен второму.
    * *Less Than* - первый операнд меньше второго.
    * *Greater Than* - первый операнд больше второго.
    * *Less Than Or Equal* - первый операнд меньше либо равен второму.
    * *Greater Than Or Equal* - первый операнд больше либо равен второму.

*Operand1*
    Первый операнд логического выражения. Должен иметь численное значение. Может быть задан в самой ноде либо с помощью ссылки на один из восьми регистров.

*Operand2*
    Второй операнд логического выражения. Аналогичен первому.

.. _nla_var_store:

Variable Store
--------------

Записать числовое значение в переменную.

.. image:: src_images/logic_editor/logic_editor_variable_store.png
    :align: center
    :width: 100%

Входные параметры
.................

*Previous*
    Предыдущая нода.

Выходные параметры
..................

*Next*
    Следующая нода.

Внутренние параметры
....................

*Var. n.*
    Имя переменной. Может быть выбрано из списка восьми регистров либо задано самостоятельно (если включен параметр ``New variable``).

*New variable*
    Если этот параметр активирован, имя переменной может быть задано самостоятельно (а не выбрано из списка регистров). Может применяться для обмена данными с сервером.

*Num.*
    Численное значение, присваиваемое переменной. По умолчанию равно нулю.

.. _nla_math:

Math Operation
--------------

Выполнить математическую операцию и сохранить результат в регистр. Любой из
параметров (операндов) может быть либо числовым значением, либо регистром.

.. image:: src_images/logic_editor/logic_editor_math_operation.png
    :align: center
    :width: 100%

Входные параметры
.................

*Previous*
    Предыдущая нода.

Выходные параметры
..................

*Next*
    Следующая нода.

Внутренние параметры
....................

*Operation*
    Математическая операция, производимая над операндами. Может иметь один из следующих типов:

    * *Random* - случайный выбор одной из нижеперечисленных операций.
    * *Add* - сумма операндов.
    * *Multiply* - произведение операндов.
    * *Subtract* - разность операндов.
    * *Divide* - частное операндов.

*Operand1*
    Первый операнд. Может представлять собой численное значение либо ссылку на один из регистров (в случае, если активирован параметр ``Variable``).

*Operand2*
    Второй операнд. Аналогичен первому.

*Destination*
    Регистр, в который помещается результат операции.

.. _nla_show_object:

Show Object
-----------

Используется для отображения объектов.

.. image:: src_images/logic_editor/logic_editor_show_object.png
    :align: center
    :width: 100%

Входные параметры
.................

*Previous*
    Предыдущая нода.

Выходные параметры
..................

*Next*
    Следующая нода.

Внутренние параметры
....................

*Object*
    Объект, который нужно отобразить.

.. _nla_hide_object:

Hide Object
-----------

Используется для скрытия объекта.

.. image:: src_images/logic_editor/logic_editor_hide_object.png
    :align: center
    :width: 100%

Входные параметры
.................

*Previous*
    Предыдущая нода.

Выходные параметры
..................

*Next*
    Следующая нода.

Внутренние параметры
....................

*Object*
    Объект, который нужно скрыть.

.. _nla_page_redirect:

Page Redirect
-------------

Служит для перенаправления на другие веб-страницы. По этой причине нода всегда находится в конце логической цепочки и не имеет выходных параметров.

.. image:: src_images/logic_editor/logic_editor_page_redirect.png
    :align: center
    :width: 100%

Входные параметры
.................

*Previous*
    Предыдущая нода.

Выходные параметры
..................

Отсутствуют.

Внутренние параметры
....................

*Url*
    Адрес страницы, которя будет открыта. По умолчанию имеет значение "https://www.blend4web.com".

.. _nla_page_param:

Page Param
----------

Позволяет сохранить произвольный параметр веб-страницы в выбранном числовом регистре.

.. image:: src_images/logic_editor/logic_editor_page_param.png
    :align: center
    :width: 100%

Входные параметры
.................

*Previous*
    Предыдущая нода.

Выходные параметры
..................

*Next*
    Следующая нода.

Внутренние параметры
....................

*Param Name*
    Имя параметра веб-страницы.

*Destination*
    Регистр, в который следует сохранить параметр.

.. _nla_send_request:

Send Request
------------

Позволяет отправить HTTP GET запрос на указанный URL и поместить значения полей 
ответа в переменные.

.. image:: src_images/logic_editor/logic_editor_send_request.png
    :align: center
    :width: 100%

Входные параметры
.................

*Previous*
    Предыдущая нода.

Выходные параметры
..................

*Next*
    Следующая нода.

Внутренние параметры
....................

*Method*
    Метод отправки запроса. Может иметь одно из двух значений:

    * *GET* - отправляет запрос на получение данных с сервера.
    * *POST* - отправляет данные на сервер.

*Url*
    Адрес, на который следует отправить запрос. По умолчанию имеет значение "https://www.blend4web.com".

*Decode Response Params*
    Список переменных, в которые сохраняются параметры, полученные от сервера. Переменные имеют имена вида ``var0``, ``var1`` и т.д., (полученные с сервера параметры должны иметь точно такие же имена) а их количество может быть настроено. На сегодняшний день значения переменных могут быть только численными.

.. note::
    Информация, полученная с сервера, должна иметь следующий вид:

    .. code-block:: json

        {"var0": 1,
        "var1": 10,
        "var2": 144,
        ...
        }

.. _nla_inherit_material:

Inherit Material
----------------

Позволяет скопировать атрибуты одного материала на другой.

.. image:: src_images/logic_editor/logic_editor_inherit_material.png
    :align: center
    :width: 100%

Входные параметры
.................

*Previous*
    Предыдущая нода.

Выходные параметры
..................

*Next*
    Следующая нода.

Внутренние параметры
....................

*Source*
    Объект, которому присвоен материал, который требуется скопировать.

*Material*
    Материал, который требуется скопировать.

*Destination*
    Объект, которому требуется присвоить скопированный материал.

*Material*
    Материал, который будет заменен скопированным материалом.

.. _nla_shader_node:

Set Shader Node Param
---------------------

Позволяет установить значение одного или нескольких параметров шейдерной ноды. В данный момент поддерживаются ноды ``Value`` и ``RGB``.

.. image:: src_images/logic_editor/logic_editor_set_shader_node_param.png
    :align: center
    :width: 100%

Входные параметры
.................

*Previous*
    Предыдущая нода.

Выходные параметры
..................

*Next*
    Следующая нода.

Внутренние параметры
....................

*Object*
    Объект, материал которого нужно отредактировать.

*Material*
    Материал, параметры которого нужно изменить. Должен использовать ноды.

*Node*
    Нода, параметры которой нужно изменить. На данный момент поддерживаются только ноды ``Value`` и ``RGB``.

*Parameters*
    Доступные для редактирования параметры выбранной ноды. Значения этих параметров могут быть заданы непосредственно в самой ноде или взяты из указанных регистров (для этого нужно активировать параметр ``Variable``).

.. _nla_delay:

Delay
-----

Позволяет установить задержку перед выполнением следующей ноды.

.. image:: src_images/logic_editor/logic_editor_delay.png
    :align: center
    :width: 100%

Входные параметры
.................

*Previous*
    Предыдущая нода.

Выходные параметры
..................

*Next*
    Следующая нода.

Внутренние параметры
....................

*Value*
    Время (в секундах), на которое задерживается передача управления следующей ноде. По умолчанию равно нулю. Может быть задано в явном виде или же взято из регистра (в случае, если активирован параметр ``Variable``).

.. _nla_shape_key:

Apply Shape Key
---------------

Позволяет задать значение параметра Shape Key.

.. image:: src_images/logic_editor/logic_editor_apply_shape_key.png
    :align: center
    :width: 100%

Входные параметры
.................

*Previous*
    Предыдущая нода.

Выходные параметры
..................

*Next*
    Следующая нода.

Внутренние параметры
....................

*Object*
    Объект, к которому нужно применить трансформацию.

*Shape Key*
    Ключ формы, который нужно применить к объекту.

*Value*
    Степень влияния выбранного ключа формы на объект. Значение может быть задано в самой ноде или взято из регистра. Изменяется в пределах от 0 до 1.

.. _nla_outline:

Outline
-------

Позволяет управлять эффектом обводки объекта.

.. image:: src_images/logic_editor/logic_editor_outline.png
    :align: center
    :width: 100%

Входные параметры
.................

*Previous*
    Предыдущая нода.

Выходные параметры
..................

*Next*
    Следующая нода.

Внутренние параметры
....................

*Object*
    Объект, эффект обводки которого требуется настроить.

*Operation*
    Операция, которую следует произвести с обводкой объекта. Этот параметр может принимать одно из следующих значений:

    * *PLAY* - включает анимацию обводки
    * *STOP* - выключает её
    * *INTENSITY* - позволяет настраивать интенсивность обводки

*Intensity*
    Интенсивность обводки объекта. Этот параметр появляется только если параметр ``Operation`` имеет значение ``INTENSITY``. Интенсивность может быть задана численно или взята из регистра (для этого нужно активировать параметр ``Variable``).

.. _nla_move_camera:

Move Camera
-----------

Позволяет перемещать камеру, в том числе с плавной интерполяцией положения.

.. image:: src_images/logic_editor/logic_editor_move_camera.png
    :align: center
    :width: 100%

Входные параметры
.................

*Previous*
    Предыдущая нода.

Выходные параметры
..................

*Next*
    Следующая нода.

Внутренние параметры
....................

*Camera*
    Камера, которую необходимо переместить.

*Location*
    Объект, к которому перемещается камера. После того, как перемещение завершится, координаты камеры и объекта будут совпадать.

*Target*
    Объект, в направлении которого камера будет развёрнута после перемещения.

*Duration*
    Время (в секундах), которое займёт перемещение. По умолчанию равно нулю (в этом случае камера перемещается мгновенно). Может быть задано вручную или с помощью ссылки на регистр (эта возможность появляется при активации параметра ``Variable``).

.. _nla_play_sound:

Play Sound
----------

Позволяет воспроизводить звук спикера.

.. image:: src_images/logic_editor/logic_editor_play_sound.png
    :align: center
    :width: 100%

Входные параметры
.................

*Previous*
    Предыдущая нода.

Выходные параметры
..................

*Next*
    Следующая нода.

Внутренние параметры
....................

*Speaker*
    Источник звука, который требуется активировать.

*Do Not Wait*
    Если этот параметр активирован, управление будет передано следующей ноде сразу же после того, как началось воспроизведение звука. В противном случае это произойдёт только после того, как звук закончится.

.. _nla_stop_sound:

Stop Sound
----------

Позволяет останавливать звук спикера.

.. image:: src_images/logic_editor/logic_editor_stop_sound.png
    :align: center
    :width: 100%

Входные параметры
.................

*Previous*
    Предыдущая нода.

Выходные параметры
..................

*Next*
    Следующая нода.

Внутренние параметры
....................

*Speaker*
    Источник звука, который нужно отключить.

.. _nla_switch_select:

Switch Select
-------------

Позволяет отследить событие выбора какого-либо объекта из списка объектов.

.. image:: src_images/logic_editor/logic_editor_switch_select.png
    :align: center
    :width: 100%

Входные параметры
.................

*Previous*
    Предыдущая нода.

Выходные параметры
..................

*<имя объекта> Hit*
    Этот параметр передаёт управление следующей ноде в случае, если выбран объект, упомянутый в его названии. По умолчанию нода ``Switch Select`` имеет один параметр этого типа, также присутствует возможность создавать новые и удалять уже существующие (нода может и не иметь ни одного такого параметра).

*Miss*
    Этот параметр передаёт управление следующей ноде в случае, если не выбран ни один объект из списка.

Внутренние параметры
....................

*Object*
    Один из объектов, доступных для выбора пользователю. Такие параметры создаются и удаляются автоматически при создании или удалении выходных параметров типа ``Hit``.

.. _nla_move_to:

Move To
-------

Позволяет перемещать объекты.

.. image:: src_images/logic_editor/logic_editor_move_to.png
    :align: center
    :width: 100%

Входные параметры
.................

*Previous*
    Предыдущая нода.

Выходные параметры
..................

*Next*
    Следующая нода.

Внутренние параметры
....................

*Object*
    Объект, который требуется переместить.

*Destination*
    Цель (объект, источник света, самера и т.п.), к которой перемещается объект. После того, как перемещение завершится, координаты объекта и цели будут совпадать.

*Duration*
    Время (в секундах), которое займёт перемещение. По умолчанию равно нулю (в этом случае объект не движется, а мгновенно перемещается к точке назначения) Может быть задано как в самой ноде, так и с помощью регистра (если активирован параметр ``Variable``).

.. _nla_console_print:

Console Print
-------------

Позволяет выводить значения переменных и дополнительную информацию в консоли браузе. Может использоваться для отладки логики.

.. image:: src_images/logic_editor/logic_editor_console_print.png
    :align: center
    :width: 100%

Входные параметры
.................

*Previous*
    Предыдущая нода.

Выходные параметры
..................

*Next*
    Следующая нода.

Внутренние параметры
....................

*Message*
    Сообщение, которые будет напечатано в консоли вместе со значениями переменных.

<имя регистра>
    Имя одного из регистров, значение которого нужно вывести в консоли. По умолчанию нода ``Console Print`` имеет один параметр такого типа, также имеется возможность создавать новые и удалять уже существующие (нода может и не иметь ни одного параметра этого типа).

.. _nla_debug:

Отладка
-------

Для отладки имеется возможность отключения (muting) нод. Для этого необходимо
выделить ноду и нажать горячую клавишу ``M``. Отключенная нода не выполняется,
но при этом передает управление следующей ноде. Если у отключенной ноды имеется
несколько выходов, то будет происходить выполнение ветки со стороны выхода отрицательного
результата (``Miss``, ``False``).

.. _nla_other:

Прочие элементы
===============

В редакторе логики также присутствуют элементы ``Reroute`` - специальные ноды, который не выполняют никаких операций, а только передают управление следующей ноде (или следующему элементу ``Reroute``). Они могут применяться для создания циклических структур или для того, чтобы сделать логическую цепочку более понятной и лёгкой для восприятия.

.. image:: src_images/logic_editor/logic_editor_reroute.png
    :align: center
    :width: 100%

.. note::
    Выходной параметр не может быть подключён к входному параметру той же ноды.
    В случае, когда это требуется сделать (например, для того, чтобы зациклить выполнение какой-либо операции), следует использовать ``Reroute``.
